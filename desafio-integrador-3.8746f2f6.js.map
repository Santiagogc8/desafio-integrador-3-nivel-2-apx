{"mappings":"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","sources":["<anon>","src/index.ts","src/router.ts","src/pages/home/index.ts","src/pages/game/index.ts","src/state.ts","src/pages/results/index.ts","src/components/button-el/index.ts","src/components/selection-el/index.ts","node_modules/.pnpm/@parcel+runtime-js@2.16.0_@_e70823accb4760e60515c7d7961c3bb5/node_modules/@parcel/runtime-js/lib/runtime-49061b37d35c5049.js","node_modules/.pnpm/@parcel+runtime-js@2.16.0_@_e70823accb4760e60515c7d7961c3bb5/node_modules/@parcel/runtime-js/lib/runtime-1eb8bb2c3c3c498d.js","node_modules/.pnpm/@parcel+runtime-js@2.16.0_@_e70823accb4760e60515c7d7961c3bb5/node_modules/@parcel/runtime-js/lib/runtime-1724c54b80fac2f6.js","src/components/star-result/index.ts","src/components/counter-el/index.ts"],"sourcesContent":["// Hacemos los imports\n\nfunction $1610de69c571aaa7$export$8a39893ac75b3cff() {\n    const div = document.createElement('div');\n    div.classList.add('welcome__container');\n    div.innerHTML = `\n        <h1>Piedra Papel <span>\\xf3</span> Tijera</h1>\n        <button-el></button-el>\n        <div class='selection__container'>\n            <selection-el image=\"tijeras\"></selection-el>\n            <selection-el image=\"piedra\"></selection-el>\n            <selection-el image=\"papel\"></selection-el>\n        </div>\n    `;\n    const style = document.createElement('style');\n    style.innerHTML = `\n        .welcome__container{\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            min-width: 322px;\n            max-width: 336px;\n            margin: 0 auto;\n            position: relative;\n            padding-bottom: 98px;\n        }\n\n        h1{\n            color: #009048;\n            font-size: 80px;\n            width: 284px;\n            margin-bottom: 26px;\n        }\n\n        span{\n            color: #91CCAF;\n        }\n\n        button-el{\n            width: 100%;\n        }\n\n        .selection__container{\n            position: absolute;\n            bottom: -30px;\n            display: flex;\n            gap: clamp(46px, 8vw, 65px);\n            z-index: 2;\n        }\n\n        selection-el{\n            width: clamp(57px, 7vw, 80px);\n        }\n\n        selection-el:last-child{\n            width: clamp(68px, 8.5vw, 97px);;\n        }\n    `;\n    const button = div.querySelector('button-el');\n    button?.addEventListener('click', ()=>{\n        (0, $e817d3341cf3ea9c$export$ff7962acd6052c28)('/game');\n    });\n    div.appendChild(style);\n    return div; // retorna el nodo creado\n}\n\n\nconst $0b89d474933103bc$export$ca000e230c0caa3e = {\n    data: {\n        history: [],\n        play: {\n            user: \"\",\n            machine: \"\"\n        }\n    },\n    listeners: [],\n    initLocalStorage () {\n        // Obtenemos la data del localStorage, si es null, usa un objeto vac√≠o '{}' por defecto\n        const localData = localStorage.getItem('state');\n        if (localData) {\n            // Si hay data, la parseamos\n            const parsedData = JSON.parse(localData);\n            // 3. Fusionamos los datos cargados con el estado inicial. Esto asegura que `this.data` use el historial guardado.\n            this.data = {\n                ...this.data,\n                ...parsedData // Sobreescribe con los valores guardados ('history')\n            };\n        }\n    },\n    getState () {\n        return this.data;\n    },\n    setState (newState) {\n        this.data = {\n            ...this.data,\n            ...newState\n        }; // Establecemos a data con una copia de data y el nuevo estado fusionados\n        // Ahora necesitamos de un algoritmo que nos renderice de nuevo todos los elementos. Por lo que hacemos un for que por cada callback de listeners\n        for (const callback of this.listeners)callback(this.data); // Y ejecutamos cada callback con la data dentro. Asi nos ahorramos llamar a getState todo el tiempo\n        this.setLocalStorage(this.getState());\n    },\n    subscribe (callback) {\n        // Ahora debemos de hacer un suscribe, que a√±ade un nuevo callback a la lista de 'listeners' para que sea ejecutado cada vez que el estado cambie\n        this.listeners.push(callback);\n        return ()=>{\n            // Que hace un filtro de los listeners para que no sean igual al callback y se llamen dos veces\n            this.listeners = this.listeners.filter((listener)=>listener !== callback);\n        };\n    },\n    setMoves (move) {\n        const moveMap = {\n            0: 'piedra',\n            1: 'papel',\n            2: 'tijeras'\n        };\n        const thisPlay = {\n            user: move,\n            machine: moveMap[Math.floor(Math.random() * 3)] // Mantenemos el movimiento de la m√°quina (si ya se hab√≠a generado)\n        };\n        const score = this.whoWins(thisPlay).toLocaleLowerCase(); // Establecemos el whoWins en minuscula en una variable\n        // Y copiamos el historial actual con la nueva jugada del usuario y el score (saber si gano o no)\n        const history = [\n            ...this.getState().history,\n            {\n                ...thisPlay,\n                score: score\n            }\n        ];\n        this.setState({\n            play: thisPlay,\n            history: history\n        });\n    },\n    whoWins (moves) {\n        const rules = {\n            tijeras: 'papel',\n            papel: 'piedra',\n            piedra: 'tijeras' // Y piedra gana a tijeras\n        };\n        if (moves.user === moves.machine) return 'Empate'; // Retornamos 'Empate'\n        if (moves.machine === rules[moves.user]) return 'Ganaste'; // Retorna 'Ganaste'\n        return 'Perdiste'; // Si nada se cumplio, retorna 'Perdiste'\n    },\n    setLocalStorage (info) {\n        localStorage.setItem('state', JSON.stringify(info));\n    }\n};\n$0b89d474933103bc$export$ca000e230c0caa3e.initLocalStorage(); // Iniciamos el localStorage\n\n\nfunction $433a441ce5feaa55$export$b8b10c7c42429e76() {\n    const div = document.createElement(\"div\");\n    div.classList.add(\"welcome__container\");\n    div.innerHTML = `\n            <p>Presiona jugar y elige: piedra, papel o tijera antes de que pasen los 3 segundos.</p>\n            <button-el>\\xa1Jugar!</button-el>\n            <div class='selection__container'>\n                <selection-el image=\"tijeras\"></selection-el>\n                <selection-el image=\"piedra\"></selection-el>\n                <selection-el image=\"papel\"></selection-el>\n            </div>\n        `;\n    const style = document.createElement(\"style\");\n    style.innerHTML = `\n            .welcome__container{\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                align-items: center;\n                min-height: 100vh;\n                min-width: 322px;\n                max-width: 336px;\n                margin: 0 auto;\n                position: relative;\n                padding-bottom: 98px;\n            }\n    \n            p{\n                font-size: 40px;\n                margin-bottom: 48px;\n                text-align: center;\n                font-weight: 600;\n            }\n    \n            span{\n                color: #91CCAF;\n            }\n    \n            button-el{\n                width: 100%;\n            }\n    \n            .selection__container{\n                position: absolute;\n                bottom: -30px;\n                display: flex;\n                gap: clamp(46px, 8vw, 65px);\n                z-index: 2;\n            }\n\n            selection-el{\n                width: clamp(57px, 8vw, 97px);\n            }\n\n            selection-el:last-child{\n                width: clamp(65px, 9vw, 115px);\n            }\n        `;\n    const text = div.querySelector(\"p\");\n    const button = div.querySelector(\"button-el\");\n    const allSelections = div.querySelectorAll(\"selection-el\");\n    button?.addEventListener(\"click\", ()=>{\n        // Crea el nuevo elemento <counter-el>\n        const counter = document.createElement(\"counter-el\");\n        counter.setAttribute(\"count\", \"3\"); // Le damos el atributo count\n        counter.setAttribute(\"route\", \"results\"); // Le damos el route\n        (0, $0b89d474933103bc$export$ca000e230c0caa3e).setState({\n            play: {\n                user: \"\",\n                machine: \"\"\n            }\n        });\n        // Reemplazamos el bot√≥n con el contador\n        button.replaceWith(counter);\n        // Eliminamos el p√°rrafo del dom\n        text?.remove();\n        div.addEventListener(\"selection-info\", (e)=>{\n            const selectedMove = e.detail.selection; // Guardamos la seleccion del usuario en una variable\n            // De todas las selecciones, hacemos un forEach en el que por cada elemento\n            allSelections.forEach((element)=>{\n                const image = element.shadowRoot?.querySelector(\"img\"); // Selecciona la imagen del elemento\n                // L√≥gica para des-enfatizar a todos (incluido el seleccionado)\n                image.style.transform = \"scale(1)\";\n                image.style.opacity = \"0.5\";\n                // Si el atributo image del elemento es igual a selectedMove\n                if (element.getAttribute(\"image\") === selectedMove) {\n                    image.style.transform = \"scale(1.5)\"; // Le aplicamos diferentes estilos\n                    image.style.opacity = \"1\";\n                }\n            });\n            (0, $0b89d474933103bc$export$ca000e230c0caa3e).setMoves(selectedMove);\n        });\n    });\n    div.appendChild(style);\n    return div; // retorna el nodo creado\n}\n\n\n\n\nfunction $88cb74afe992d611$export$2a1050de14a7376c() {\n    const lastState = (0, $0b89d474933103bc$export$ca000e230c0caa3e).getState(); // Obtenemos el estado actualizado\n    // Hacemos el calculo de puntajes utilizando el state global y haciendo un filtro de la longitud del array devuelto\n    const userScore = lastState.history.filter((e)=>e.score === 'ganaste').length;\n    const machineScore = lastState.history.filter((e)=>e.score === 'perdiste').length;\n    const div = document.createElement(\"div\"); // Creamos el div\n    // Si el lastState en la propiedad play y user es diferente a vacio (el usuario si jugo)\n    if (lastState.play.user !== \"\") {\n        // Le hacemos el innerHTML con las imagenes, scores y ganador\n        div.innerHTML = `\n            <selection-el image=\"${lastState.play.machine}\" class=\"machine-play\"></selection-el>\n            <selection-el image=\"${lastState.play.user}\" class=\"user-play\"></selection-el>\n            <div class='result'>\n                <star-result score='${(0, $0b89d474933103bc$export$ca000e230c0caa3e).whoWins(lastState.play)}'></star-result>\n                <div class='history'>\n                    <p>Score</p>\n                    <p>Tu: ${userScore}</p>\n                    <p>Maquina: ${machineScore}</p>\n                </div>\n                <button-el>Volver a jugar</button-el>\n            </div>\n        `;\n        setTimeout(()=>{\n            const result = div.querySelector(\".result\"); // Seleccionamos el .result\n            result.style.display = \"flex\"; // Y le cambiamos el style a flex\n            setTimeout(()=>{\n                if (machineScore - userScore === 10) alert('La maquina te esta padriando maestro, tomate un respiro'); // Enviamos un mensaje\n            }, 1000);\n        }, 2000);\n        div.querySelector('button-el')?.addEventListener('click', ()=>{\n            (0, $e817d3341cf3ea9c$export$ff7962acd6052c28)('/game'); // Con game como ruta\n        });\n    } else {\n        div.innerHTML = `\n            <div class='result__fallback'>\n                <h4>Vaya, parece que no has jugado</h4>\n                <button-el>Llevame al juego!</button-el>\n            </div>\n        `;\n        const button = div.querySelector(\"button-el\");\n        button?.addEventListener(\"click\", ()=>{\n            (0, $e817d3341cf3ea9c$export$ff7962acd6052c28)(\"/game\");\n        });\n    }\n    const style = document.createElement(\"style\");\n    const backgroundColors = {\n        // Establecemos un mapa con los colores de fondo por cada valor\n        ganaste: \"var(--win-bg)\",\n        perdiste: \"var(--loose-bg)\",\n        empate: \"var(--draw-bg)\"\n    };\n    style.innerHTML = `\n        .machine-play{\n            position: absolute;\n            top: -20px;\n            width: 300px;\n            height: 400px;\n            left: 50%;\n            transform: translateX(-50%) rotate(180deg);\n        }\n\n        .user-play{\n            position: absolute;\n            bottom: -20px;\n            width: 300px;\n            height: 400px;\n            left: 50%;\n            transform: translateX(-50%);\n        }\n\n        .result__fallback{\n            min-height: 100vh;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            gap: 40px;\n        }\n\n        button-el{\n            width: 340px;\n        }\n\n        h4{\n            text-align: center;\n            font-size: 40px;\n        }\n\n        .result{\n            background-color: ${backgroundColors[(0, $0b89d474933103bc$export$ca000e230c0caa3e).whoWins(lastState.play).toLocaleLowerCase()]};\n            position: absolute;\n            inset: 0;\n            display: none;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            gap: 20px;\n        }\n\n        .history{\n            width: 259px;\n            background-color: white;\n            border: 10px solid black;\n            border-radius: 10px;\n            padding: 20px;\n            font-family: 'Odibee Sans', sans-serif;\n        }\n\n        .history p{\n            font-size: 45px;\n            text-align: end;\n        }\n\n        .history p:first-child{\n            font-size: 55px;\n            text-align: center;\n            margin-bottom: 15px;\n        }\n    `;\n    //* En .result (css), establecemos el color de fondo con el mapeo del objeto en la posicion extraida de state.whoWins en minuscula\n    div.appendChild(style);\n    return div; // retorna el nodo creado\n}\n\n\nconst $e817d3341cf3ea9c$var$routes = [\n    // Creamos nuestro array de rutas\n    {\n        path: /\\/home/,\n        page: (0, $1610de69c571aaa7$export$8a39893ac75b3cff)\n    },\n    {\n        path: /\\/game/,\n        page: (0, $433a441ce5feaa55$export$b8b10c7c42429e76)\n    },\n    {\n        path: /\\/results/,\n        page: (0, $88cb74afe992d611$export$2a1050de14a7376c)\n    }\n];\nlet $e817d3341cf3ea9c$var$containerEl; // Creamos una variable que es de tipo Element\nfunction $e817d3341cf3ea9c$export$ff7962acd6052c28(path) {\n    // Exportamos la funcion navigate que recibe un path\n    history.pushState({}, \"\", path); // Creamos el pushState y le pasamos los 3 argumentos requeridos (1. Estado, 2. Un titulo, 3. La url)\n    $e817d3341cf3ea9c$var$containerEl.innerHTML = \"\"; // Limpiamos el dom del container recibido\n    const test = $e817d3341cf3ea9c$var$routes.find((r)=>r.path.test(path)); // Hacemos un test de la expresion regular. Este test lo hacemos recorriendo el array de routes hasta encontrar el que pase el test de la expresion regular con path como argumento\n    if (test) {\n        // Si test nos retorna un true\n        const page = test.page(); // Le decimos a lo que nos retorna el test que ejecute la pagina\n        $e817d3341cf3ea9c$var$containerEl.appendChild(page); // Y al container le hacemos un appendChild con el page como argumento\n    } else // En caso contrario\n    $e817d3341cf3ea9c$var$containerEl.innerHTML = `<h4>Oh no, parece que te has perdido \\u{1F630}. La ruta que estabas buscando no existe.</h4>`;\n}\nfunction $e817d3341cf3ea9c$export$cf7ee87ede64229c(container) {\n    $e817d3341cf3ea9c$var$containerEl = container; // Inicializamos la variable containerEl a container\n    window.onpopstate = ()=>{\n        // Al evento popstate le asignamos una funcion (este evento funciona para que cuando el usuario quiera devolverse, pueda renderizarse de nuevo los componentes)\n        $e817d3341cf3ea9c$export$ff7962acd6052c28(window.location.pathname); // Y ejecuta navigate en la location deseada\n    };\n    // Hacemos un ternario que valida si el usuario esta en el path \"/\". Si es asi, retorna \"home\". En caso contrario, retorna el location.pathname\n    const path = window.location.pathname === \"/\" ? \"/home\" : window.location.pathname;\n    $e817d3341cf3ea9c$export$ff7962acd6052c28(path);\n}\n\n\nclass $38489cf41c3f917c$var$ButtonEl extends HTMLElement {\n    constructor(){\n        super();\n        this.shadow = this.attachShadow({\n            mode: 'open'\n        }); // Inicializamos el shadow\n        this.render(); // Y hacemos el render\n    }\n    render() {\n        const button = document.createElement('button');\n        button.textContent = this.textContent || 'Empezar';\n        const style = document.createElement('style');\n        style.innerHTML = `\n            button{\n                font-family: 'Odibee Sans', sans-serif;\n                width: 100%;\n                height: 87px;\n                font-size: 45px;\n                border: 10px solid var(--dark-btn-blue);\n                border-radius: 10px;\n                color: var(--light-btn-font);\n                background-color: var(--light-btn-blue);\n            }\n\n            button:hover{\n                cursor: pointer;\n            }\n        `;\n        this.shadow.appendChild(style);\n        this.shadow.appendChild(button);\n    }\n}\ncustomElements.define('button-el', $38489cf41c3f917c$var$ButtonEl);\n\n\nvar $dc07c5028d7b265d$exports = {};\n$dc07c5028d7b265d$exports = import.meta.resolve(\"72eu7\");\n\n\nvar $2f4910a5b96eb79f$exports = {};\n$2f4910a5b96eb79f$exports = import.meta.resolve(\"7Nkwz\");\n\n\nvar $6434739029a36b0d$exports = {};\n$6434739029a36b0d$exports = import.meta.resolve(\"efEvF\");\n\n\nclass $7673466413d194f8$var$SelectionEl extends HTMLElement {\n    constructor(){\n        super();\n        this.shadow = this.attachShadow({\n            mode: 'open'\n        }); // Incializamos shadow con su mode open\n        this.render(); // Y hacemos el render\n    }\n    render() {\n        // Creamos los elementos que necesitamos\n        const image = document.createElement('img');\n        const imageAttribute = this.getAttribute('image'); // Y obtenemos el atributo image y lo guardamos en imageAttribute\n        const style = document.createElement('style');\n        // Creamos un mapa que recibe una propiedad de tipo string y un valor de tipo string\n        const imageMap = {\n            // Establecemos las propiedades\n            'tijeras': $dc07c5028d7b265d$exports,\n            'piedra': $2f4910a5b96eb79f$exports,\n            'papel': $6434739029a36b0d$exports\n        };\n        const imageUrl = imageMap[imageAttribute]; // Y establecemos como imageUrl el valor de la imagen con propiedad imageAttribute (piedra, papel o tijeras)\n        if (imageUrl) {\n            image.src = imageUrl; // Le establecemos como src la url\n            image.classList.add(imageAttribute); // Y le agregamos el atributo como clase\n        }\n        image.alt = 'seleccion'; // Agregamos un alt a la imagen\n        style.innerHTML = `\n            img{\n                transition: all 0.3s ease-in-out;\n                width: 100%;\n                height: 100%;\n            }\n        `;\n        image.addEventListener('click', ()=>{\n            const selectionInfo = new CustomEvent('selection-info', {\n                detail: {\n                    selection: imageAttribute // Que devuelve el detail con selection y el atributo como valor\n                },\n                bubbles: true // Permitimos el burbujeo\n            });\n            this.dispatchEvent(selectionInfo); // Y enviamos el evento\n        });\n        this.shadow.appendChild(style);\n        this.shadow.appendChild(image);\n    }\n}\ncustomElements.define('selection-el', $7673466413d194f8$var$SelectionEl);\n\n\nclass $d23422ec46677293$var$StarResult extends HTMLElement {\n    constructor(){\n        super();\n        this.shadow = this.attachShadow({\n            mode: \"open\"\n        }); // Inicializamos el shadow\n        this.render();\n    }\n    render() {\n        const div = document.createElement(\"div\"); // Creamos un div\n        const score = this.getAttribute('score'); // Obtenemos el atributo score\n        // Y le agregamos un svg (Con un text que contiene el texto recibido)\n        div.innerHTML = `\n            <svg width=\"260\" height=\"260\" viewBox=\"0 0 363 362\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M206.486 62.1223L208.047 62.9729L209.795 62.6458L320.673 41.9446L299.972 152.823L299.646 154.571L300.496 156.132L354.447 255.187L242.599 269.762L240.835 269.992L239.614 271.283L162.078 353.202L113.654 251.333L112.891 249.728L111.285 248.964L9.41443 200.538L91.3344 123.004L92.6263 121.782L92.8558 120.019L107.431 8.17017L206.486 62.1223Z\" fill=\"#6CB46C\" stroke=\"black\" stroke-width=\"13\"/>\n            <text x=\"50%\" y=\"50%\" dominant-baseline=\"middle\" text-anchor=\"middle\" fill=\"white\" font-size=\"70\">${score}</text>\n            </svg>\n        `;\n        div.style.fontFamily = 'Odibee Sans, sans-serif';\n        const svgPath = div.querySelector('svg').querySelector('path'); // Seleccionamos el path del svg\n        // Si el atributo es igual a 'perdiste'\n        if (score?.toLocaleLowerCase() === 'perdiste') svgPath.setAttribute('fill', 'var(--star-red)'); // Pone la estrella roja\n        // Si el atributo es igual a 'empate'\n        if (score?.toLocaleLowerCase() === 'empate') svgPath.setAttribute('fill', 'var(--star-yellow)'); // Pone la estrella amarilla\n        // Si no cumple con ninguna condicion, deja el color en #6CB46C\n        this.shadow.appendChild(div); // Le agregamos al shadow el div\n    }\n}\ncustomElements.define(\"star-result\", $d23422ec46677293$var$StarResult); // Y definimos el custom element\n\n\n\nclass $46f73d452252c191$var$CounterEl extends HTMLElement {\n    static get observedAttributes() {\n        return [\n            \"count\"\n        ]; // Observamos el atributo 'count' con el metodo observedAttributes de los customElements\n    }\n    constructor(){\n        super();\n        this.shadow = this.attachShadow({\n            mode: \"open\"\n        }); // Inicializamos el shadow\n        this.render();\n    }\n    render() {\n        // Creamos el metodo render\n        // Limpiamos el contenido anterior\n        this.shadow.innerHTML = \"\";\n        // Creamos el div, un span y el style\n        const div = document.createElement(\"div\");\n        const span = document.createElement('span');\n        const style = document.createElement(\"style\");\n        // Le agregamos un svg al div (para hacer el contador)\n        div.innerHTML = `\n            <svg class=\"progress-ring\" viewBox=\"0 0 100 100\">\n                <circle\n                    class=\"ring-bg\"\n                    cx=\"50\" cy=\"50\" r=\"45\"\n                ></circle>\n                <circle\n                    class=\"ring-progress\"\n                    cx=\"50\" cy=\"50\" r=\"45\"\n                    stroke-dasharray=\"283\"\n                    stroke-dashoffset=\"0\"\n                ></circle>\n            </svg>\n        `;\n        div.appendChild(span); // Le agregamos el span al div\n        let seconds = parseInt(this.getAttribute(\"count\")) || 0; // E inicializamos a seconds con el valor obtenido del atributo count o 0\n        const updateCounter = ()=>{\n            // Actualiza el n√∫mero visible\n            span.textContent = `${seconds}`;\n            if (seconds < 0) {\n                div.style.display = 'none'; // Lo dejamos de mostrar\n                clearInterval(this.interval); // Y terminamos el intervalo\n                (0, $e817d3341cf3ea9c$export$ff7962acd6052c28)('/' + this.getAttribute('route'));\n            }\n            seconds--; // Cambiamos el numero del contador\n        };\n        style.innerHTML = `\n            div {\n                width: 200px;\n                height: 200px;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                position: relative;\n            }\n\n            span {\n                position: absolute;\n                font-size: 100px;\n                font-weight: 700;\n                z-index: 2;\n                color: black;\n            }\n            \n            .progress-ring {\n                position: absolute;\n                width: 100%;\n                height: 100%;\n                transform: rotate(-90deg); \n            }\n            \n            .ring-bg {\n                fill: none;\n                stroke: #e0e0e0;\n                stroke-width: 10;\n            }\n\n            .ring-progress {\n                fill: none;\n                stroke: black;\n                stroke-width: 10;\n                stroke-dasharray: 283;\n                stroke-dashoffset: 0; \n                animation: sweep 1s linear infinite;\n            }\n\n            @keyframes sweep {\n                from {\n                    stroke-dashoffset: 0;\n                }\n\n                to {\n                    stroke-dashoffset: 283; \n                }\n            }\n        `;\n        this.shadow.appendChild(style);\n        this.shadow.appendChild(div);\n        updateCounter();\n        // Iniciamos el intervalo para que se ejecute cada 1s\n        this.interval = setInterval(updateCounter, 1000);\n    }\n    // Ejecutamos el metodo attributeChangedCallback\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (name === \"count\") {\n            clearInterval(this.interval); // Limpia el intervalo anterior\n            this.render(); // Vuelve a renderizar con el nuevo valor\n        }\n    }\n    disconnectedCallback() {\n        clearInterval(this.interval);\n    }\n}\ncustomElements.define(\"counter-el\", $46f73d452252c191$var$CounterEl);\n\n\n(function() {\n    const root = document.querySelector(\"#root\");\n    (0, $e817d3341cf3ea9c$export$cf7ee87ede64229c)(root);\n})();\n\n\n//# sourceMappingURL=desafio-integrador-3.8746f2f6.js.map\n","import { initRouter } from \"./router\";\r\n\r\nimport \"./components/button-el\";\r\nimport \"./components/selection-el\";\r\nimport \"./components/star-result\";\r\nimport \"./components/counter-el\";\r\n\r\n(function () {\r\n\tconst root = document.querySelector(\"#root\");\r\n\r\n\tinitRouter(root!)\r\n})();\r\n","// Hacemos los imports\r\nimport { initHome } from \"./pages/home\";\r\nimport { initGame } from \"./pages/game\";\r\nimport { initResults } from \"./pages/results\";\r\n\r\nconst routes = [\r\n\t// Creamos nuestro array de rutas\r\n\t{\r\n\t\tpath: /\\/home/, // Hacemos una expresion regular para que valide /ruta\r\n\t\tpage: initHome, // Ejecutamos el codigo de la pagina correspondiente\r\n\t},\r\n\t{\r\n\t\tpath: /\\/game/,\r\n\t\tpage: initGame,\r\n\t},\r\n\t{\r\n\t\tpath: /\\/results/,\r\n\t\tpage: initResults,\r\n\t},\r\n];\r\n\r\nlet containerEl: Element; // Creamos una variable que es de tipo Element\r\n\r\nexport function navigate(path: any) {\r\n\t// Exportamos la funcion navigate que recibe un path\r\n\thistory.pushState({}, \"\", path); // Creamos el pushState y le pasamos los 3 argumentos requeridos (1. Estado, 2. Un titulo, 3. La url)\r\n\r\n\tcontainerEl.innerHTML = \"\"; // Limpiamos el dom del container recibido\r\n\r\n\tconst test = routes.find((r) => r.path.test(path)); // Hacemos un test de la expresion regular. Este test lo hacemos recorriendo el array de routes hasta encontrar el que pase el test de la expresion regular con path como argumento\r\n\r\n\tif (test) {\r\n\t\t// Si test nos retorna un true\r\n\t\tconst page = test.page(); // Le decimos a lo que nos retorna el test que ejecute la pagina\r\n\t\tcontainerEl.appendChild(page); // Y al container le hacemos un appendChild con el page como argumento\r\n\t} else {\r\n\t\t// En caso contrario\r\n\t\tcontainerEl.innerHTML = `<h4>Oh no, parece que te has perdido üò∞. La ruta que estabas buscando no existe.</h4>`;\r\n\t}\r\n}\r\n\r\n// Creamos una funcion que iniciara nuestro router. Recibira un container, sobre el que luego hara los cambios en el dom\r\nexport function initRouter(container: Element) {\r\n\tcontainerEl = container; // Inicializamos la variable containerEl a container\r\n\r\n\twindow.onpopstate = () => {\r\n\t\t// Al evento popstate le asignamos una funcion (este evento funciona para que cuando el usuario quiera devolverse, pueda renderizarse de nuevo los componentes)\r\n\t\tnavigate(window.location.pathname); // Y ejecuta navigate en la location deseada\r\n\t};\r\n\r\n\t// Hacemos un ternario que valida si el usuario esta en el path \"/\". Si es asi, retorna \"home\". En caso contrario, retorna el location.pathname\r\n\tconst path = window.location.pathname === \"/\" ? \"/home\" : window.location.pathname;\r\n\tnavigate(path);\r\n}","import { navigate } from \"../../router\";\r\n\r\nexport function initHome(){\r\n    const div = document.createElement('div');\r\n\r\n    div.classList.add('welcome__container')\r\n    div.innerHTML = `\r\n        <h1>Piedra Papel <span>√≥</span> Tijera</h1>\r\n        <button-el></button-el>\r\n        <div class='selection__container'>\r\n            <selection-el image=\"tijeras\"></selection-el>\r\n            <selection-el image=\"piedra\"></selection-el>\r\n            <selection-el image=\"papel\"></selection-el>\r\n        </div>\r\n    `\r\n\r\n    const style = document.createElement('style')\r\n\r\n    style.innerHTML = `\r\n        .welcome__container{\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: center;\r\n            align-items: center;\r\n            min-height: 100vh;\r\n            min-width: 322px;\r\n            max-width: 336px;\r\n            margin: 0 auto;\r\n            position: relative;\r\n            padding-bottom: 98px;\r\n        }\r\n\r\n        h1{\r\n            color: #009048;\r\n            font-size: 80px;\r\n            width: 284px;\r\n            margin-bottom: 26px;\r\n        }\r\n\r\n        span{\r\n            color: #91CCAF;\r\n        }\r\n\r\n        button-el{\r\n            width: 100%;\r\n        }\r\n\r\n        .selection__container{\r\n            position: absolute;\r\n            bottom: -30px;\r\n            display: flex;\r\n            gap: clamp(46px, 8vw, 65px);\r\n            z-index: 2;\r\n        }\r\n\r\n        selection-el{\r\n            width: clamp(57px, 7vw, 80px);\r\n        }\r\n\r\n        selection-el:last-child{\r\n            width: clamp(68px, 8.5vw, 97px);;\r\n        }\r\n    `\r\n    const button = div.querySelector('button-el');\r\n    button?.addEventListener('click', ()=>{\r\n        navigate('/game')\r\n    });\r\n\r\n    div.appendChild(style);\r\n\r\n    return div; // retorna el nodo creado\r\n}","import { state } from '../../state'\r\n\r\nexport function initGame() {\r\n\tconst div = document.createElement(\"div\");\r\n\r\n\tdiv.classList.add(\"welcome__container\");\r\n\tdiv.innerHTML = `\r\n            <p>Presiona jugar y elige: piedra, papel o tijera antes de que pasen los 3 segundos.</p>\r\n            <button-el>¬°Jugar!</button-el>\r\n            <div class='selection__container'>\r\n                <selection-el image=\"tijeras\"></selection-el>\r\n                <selection-el image=\"piedra\"></selection-el>\r\n                <selection-el image=\"papel\"></selection-el>\r\n            </div>\r\n        `;\r\n\r\n\tconst style = document.createElement(\"style\");\r\n\r\n\tstyle.innerHTML = `\r\n            .welcome__container{\r\n                display: flex;\r\n                flex-direction: column;\r\n                justify-content: center;\r\n                align-items: center;\r\n                min-height: 100vh;\r\n                min-width: 322px;\r\n                max-width: 336px;\r\n                margin: 0 auto;\r\n                position: relative;\r\n                padding-bottom: 98px;\r\n            }\r\n    \r\n            p{\r\n                font-size: 40px;\r\n                margin-bottom: 48px;\r\n                text-align: center;\r\n                font-weight: 600;\r\n            }\r\n    \r\n            span{\r\n                color: #91CCAF;\r\n            }\r\n    \r\n            button-el{\r\n                width: 100%;\r\n            }\r\n    \r\n            .selection__container{\r\n                position: absolute;\r\n                bottom: -30px;\r\n                display: flex;\r\n                gap: clamp(46px, 8vw, 65px);\r\n                z-index: 2;\r\n            }\r\n\r\n            selection-el{\r\n                width: clamp(57px, 8vw, 97px);\r\n            }\r\n\r\n            selection-el:last-child{\r\n                width: clamp(65px, 9vw, 115px);\r\n            }\r\n        `;\r\n\r\n\tconst text = div.querySelector(\"p\");\r\n\tconst button = div.querySelector(\"button-el\");\r\n\tconst allSelections = div.querySelectorAll(\"selection-el\");\r\n\r\n    button?.addEventListener(\"click\", () => {\r\n\t\t// Crea el nuevo elemento <counter-el>\r\n\t\tconst counter = document.createElement(\"counter-el\");\r\n\t\tcounter.setAttribute(\"count\", \"3\"); // Le damos el atributo count\r\n\t\tcounter.setAttribute(\"route\", \"results\"); // Le damos el route\r\n\r\n        state.setState({ // Establecemos el estado en nada apenas se haga click en el boton de jugar. Con eso, en caso de que el usuario no elija nada, mande un string vacio\r\n            play: { user: \"\", machine: \"\" }\r\n        });\r\n\r\n\t\t// Reemplazamos el bot√≥n con el contador\r\n\t\tbutton.replaceWith(counter);\r\n\r\n\t\t// Eliminamos el p√°rrafo del dom\r\n\t\ttext?.remove();\r\n\r\n\t\tdiv.addEventListener(\"selection-info\", (e: any) => { // Escuchamos el customEvent selection-info\r\n\t\t\tconst selectedMove = e.detail.selection; // Guardamos la seleccion del usuario en una variable\r\n\r\n\t\t\t// De todas las selecciones, hacemos un forEach en el que por cada elemento\r\n\t\t\tallSelections.forEach((element) => {\r\n\t\t\t\tconst image = element.shadowRoot?.querySelector(\"img\"); // Selecciona la imagen del elemento\r\n\r\n\t\t\t\t// L√≥gica para des-enfatizar a todos (incluido el seleccionado)\r\n\t\t\t\timage!.style.transform = \"scale(1)\";\r\n\t\t\t\timage!.style.opacity = \"0.5\";\r\n\r\n\t\t\t\t// Si el atributo image del elemento es igual a selectedMove\r\n\t\t\t\tif (element.getAttribute(\"image\") === selectedMove) {\r\n\t\t\t\t\timage!.style.transform = \"scale(1.5)\"; // Le aplicamos diferentes estilos\r\n\t\t\t\t\timage!.style.opacity = \"1\";\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n            state.setMoves(selectedMove);\r\n\t\t});\r\n\t});\r\n\r\n\tdiv.appendChild(style);\r\n\r\n\treturn div; // retorna el nodo creado\r\n}","interface Play {\r\n    user: string,\r\n    machine: string;\r\n}\r\n\r\nconst state = { // Creamos nuestro state\r\n    data: { // Creamos un data que guardara los elementos en un objeto\r\n        history: [] as any[], // Que dentro tendra un array de plays\r\n        play: { // Y la play del momento\r\n            user: \"\",\r\n            machine: \"\"\r\n        } as Play\r\n    }, \r\n    listeners: [] as any[], // Creamos el array de listeners\r\n    initLocalStorage(){ // Creamos un metodo que inicializara el localStorage\r\n        // Obtenemos la data del localStorage, si es null, usa un objeto vac√≠o '{}' por defecto\r\n        const localData = localStorage.getItem('state');\r\n        \r\n        if (localData) {\r\n            // Si hay data, la parseamos\r\n            const parsedData = JSON.parse(localData);\r\n            \r\n            // 3. Fusionamos los datos cargados con el estado inicial. Esto asegura que `this.data` use el historial guardado.\r\n            this.data = {\r\n                ...this.data, // Mantiene la estructura base (como 'play')\r\n                ...parsedData // Sobreescribe con los valores guardados ('history')\r\n            };\r\n        }\r\n    },\r\n    getState(){ // Creamos el metodo getState que retornara la data actual\r\n        return this.data\r\n    },\r\n    setState(newState: any){ // Creamos el metodo setState que recibe un nuevo state de cualquier tipo\r\n        this.data = {...this.data, ...newState}; // Establecemos a data con una copia de data y el nuevo estado fusionados\r\n\r\n        // Ahora necesitamos de un algoritmo que nos renderice de nuevo todos los elementos. Por lo que hacemos un for que por cada callback de listeners\r\n        for (const callback of this.listeners){\r\n            callback(this.data); // Y ejecutamos cada callback con la data dentro. Asi nos ahorramos llamar a getState todo el tiempo\r\n        }\r\n\r\n        this.setLocalStorage(this.getState());\r\n    }, \r\n    subscribe(callback: (arg: any) => any){ \r\n        // Ahora debemos de hacer un suscribe, que a√±ade un nuevo callback a la lista de 'listeners' para que sea ejecutado cada vez que el estado cambie\r\n        this.listeners.push(callback);\r\n\r\n        return () => { // Rertornamos una funcion\r\n            // Que hace un filtro de los listeners para que no sean igual al callback y se llamen dos veces\r\n            this.listeners = this.listeners.filter(listener => listener !== callback);\r\n        }\r\n    },\r\n    setMoves(move: string){ // Creamos un metodo para que nos permita establecer la jugada del usuario\r\n        const moveMap: { [key: number]: string } = { // Creamos un mapa que contiene los posibles movimientos\r\n            0: 'piedra',\r\n            1: 'papel',\r\n            2: 'tijeras'\r\n        }\r\n\r\n        const thisPlay = {\r\n            user: move, //  Establecemos el movimiento del usuario\r\n            machine: moveMap[Math.floor(Math.random() * 3)] // Mantenemos el movimiento de la m√°quina (si ya se hab√≠a generado)\r\n        }\r\n\r\n        const score = this.whoWins(thisPlay).toLocaleLowerCase(); // Establecemos el whoWins en minuscula en una variable\r\n\r\n        // Y copiamos el historial actual con la nueva jugada del usuario y el score (saber si gano o no)\r\n        const history = [...this.getState().history, {...thisPlay, score}];\r\n\r\n        this.setState({ // Establecemos el estado nuevo en play\r\n            play: thisPlay,\r\n            history: history\r\n        });\r\n    },\r\n    whoWins(moves: any){ // Creamos un metodo que nos dira quien gano la ronda\r\n        const rules: { [key: string]: string } = { // Creamos un mapa que\r\n            tijeras: 'papel', // Establece que tijeras gana a papel\r\n            papel: 'piedra', // Papel gana a piedra\r\n            piedra: 'tijeras' // Y piedra gana a tijeras\r\n        }\r\n\r\n        if(moves.user === moves.machine){ // Si las jugadas de los dos son iguales\r\n            return 'Empate'; // Retornamos 'Empate'\r\n        }\r\n\r\n        if(moves.machine === rules[moves.user]){ // Si la jugada de machine es lo mismo a lo que pierde contra lo que jugo el usuario\r\n            return 'Ganaste'; // Retorna 'Ganaste'\r\n        }\r\n\r\n        return 'Perdiste'; // Si nada se cumplio, retorna 'Perdiste'\r\n    }, \r\n    setLocalStorage(info: any){\r\n        localStorage.setItem('state', JSON.stringify(info))\r\n    }\r\n}\r\n\r\nstate.initLocalStorage(); // Iniciamos el localStorage\r\n\r\nexport { state }","import { state } from \"../../state\";\r\nimport { navigate } from \"../../router\";\r\n\r\nexport function initResults() {\r\n    const lastState = state.getState(); // Obtenemos el estado actualizado\r\n\r\n    // Hacemos el calculo de puntajes utilizando el state global y haciendo un filtro de la longitud del array devuelto\r\n    const userScore = lastState.history.filter((e: { score: string }) => e.score === 'ganaste').length;\r\n    const machineScore = lastState.history.filter((e: { score: string }) => e.score === 'perdiste').length;\r\n\r\n\tconst div = document.createElement(\"div\"); // Creamos el div\r\n\r\n    // Si el lastState en la propiedad play y user es diferente a vacio (el usuario si jugo)\r\n\tif (lastState.play.user !== \"\") {\r\n\t\t// Le hacemos el innerHTML con las imagenes, scores y ganador\r\n        div.innerHTML = `\r\n            <selection-el image=\"${lastState.play.machine}\" class=\"machine-play\"></selection-el>\r\n            <selection-el image=\"${lastState.play.user}\" class=\"user-play\"></selection-el>\r\n            <div class='result'>\r\n                <star-result score='${state.whoWins(lastState.play)}'></star-result>\r\n                <div class='history'>\r\n                    <p>Score</p>\r\n                    <p>Tu: ${userScore}</p>\r\n                    <p>Maquina: ${machineScore}</p>\r\n                </div>\r\n                <button-el>Volver a jugar</button-el>\r\n            </div>\r\n        `;\r\n\r\n\t\tsetTimeout(() => { // Establecemos un timeout de 2 segundos\r\n\t\t\tconst result = div.querySelector(\".result\") as HTMLElement; // Seleccionamos el .result\r\n\t\t\tresult.style.display = \"flex\"; // Y le cambiamos el style a flex\r\n\r\n            setTimeout(()=>{ // Luego como gui√±o (si el usuario va perdiendo por 10 de diferencia)\r\n                if(machineScore - userScore === 10){\r\n                    alert('La maquina te esta padriando maestro, tomate un respiro'); // Enviamos un mensaje\r\n                }\r\n            }, 1000);\r\n\r\n\t\t}, 2000);\r\n\r\n        div.querySelector('button-el')?.addEventListener('click', ()=>{ // Y escuchamos el evento de click del button-el\r\n            navigate('/game'); // Con game como ruta\r\n        })\r\n\t} else { // Si el usuario no hizo seleccion, muestra un fallback\r\n\t\tdiv.innerHTML = `\r\n            <div class='result__fallback'>\r\n                <h4>Vaya, parece que no has jugado</h4>\r\n                <button-el>Llevame al juego!</button-el>\r\n            </div>\r\n        `;\r\n\r\n\t\tconst button = div.querySelector(\"button-el\");\r\n\t\tbutton?.addEventListener(\"click\", () => { // Y hacemos el mismo evento de click para el boton\r\n\t\t\tnavigate(\"/game\");\r\n\t\t});\r\n\t}\r\n\r\n\tconst style = document.createElement(\"style\");\r\n\r\n\tconst backgroundColors: { [key: string]: string } = {\r\n\t\t// Establecemos un mapa con los colores de fondo por cada valor\r\n\t\tganaste: \"var(--win-bg)\",\r\n\t\tperdiste: \"var(--loose-bg)\",\r\n\t\tempate: \"var(--draw-bg)\",\r\n\t};\r\n\r\n\tstyle.innerHTML = `\r\n        .machine-play{\r\n            position: absolute;\r\n            top: -20px;\r\n            width: 300px;\r\n            height: 400px;\r\n            left: 50%;\r\n            transform: translateX(-50%) rotate(180deg);\r\n        }\r\n\r\n        .user-play{\r\n            position: absolute;\r\n            bottom: -20px;\r\n            width: 300px;\r\n            height: 400px;\r\n            left: 50%;\r\n            transform: translateX(-50%);\r\n        }\r\n\r\n        .result__fallback{\r\n            min-height: 100vh;\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: center;\r\n            align-items: center;\r\n            gap: 40px;\r\n        }\r\n\r\n        button-el{\r\n            width: 340px;\r\n        }\r\n\r\n        h4{\r\n            text-align: center;\r\n            font-size: 40px;\r\n        }\r\n\r\n        .result{\r\n            background-color: ${backgroundColors[state.whoWins(lastState.play).toLocaleLowerCase()]};\r\n            position: absolute;\r\n            inset: 0;\r\n            display: none;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            justify-content: center;\r\n            gap: 20px;\r\n        }\r\n\r\n        .history{\r\n            width: 259px;\r\n            background-color: white;\r\n            border: 10px solid black;\r\n            border-radius: 10px;\r\n            padding: 20px;\r\n            font-family: 'Odibee Sans', sans-serif;\r\n        }\r\n\r\n        .history p{\r\n            font-size: 45px;\r\n            text-align: end;\r\n        }\r\n\r\n        .history p:first-child{\r\n            font-size: 55px;\r\n            text-align: center;\r\n            margin-bottom: 15px;\r\n        }\r\n    `;\r\n\r\n\t//* En .result (css), establecemos el color de fondo con el mapeo del objeto en la posicion extraida de state.whoWins en minuscula\r\n\r\n\tdiv.appendChild(style);\r\n\r\n\treturn div; // retorna el nodo creado\r\n}","class ButtonEl extends HTMLElement{ // Creamos la clase ButtonEl que extiende a HTMLElement\r\n    shadow: ShadowRoot; // Le decimos que recibe un shadow\r\n    constructor() {\r\n        super();\r\n\r\n        this.shadow = this.attachShadow({mode: 'open'}); // Inicializamos el shadow\r\n\r\n        this.render(); // Y hacemos el render\r\n    }\r\n\r\n    render(){\r\n        const button = document.createElement('button');\r\n        button.textContent = this.textContent || 'Empezar';\r\n        const style = document.createElement('style');\r\n\r\n        style.innerHTML = `\r\n            button{\r\n                font-family: 'Odibee Sans', sans-serif;\r\n                width: 100%;\r\n                height: 87px;\r\n                font-size: 45px;\r\n                border: 10px solid var(--dark-btn-blue);\r\n                border-radius: 10px;\r\n                color: var(--light-btn-font);\r\n                background-color: var(--light-btn-blue);\r\n            }\r\n\r\n            button:hover{\r\n                cursor: pointer;\r\n            }\r\n        `\r\n\r\n        this.shadow.appendChild(style);\r\n        this.shadow.appendChild(button);\r\n    }\r\n}\r\n\r\ncustomElements.define('button-el', ButtonEl);","const scissorsUrl = require('url:../../img/tijera.svg');\r\nconst rockUrl = require('url:../../img/piedra.svg');\r\nconst paperUrl = require('url:../../img/papel.svg');\r\n\r\nclass SelectionEl extends HTMLElement{ // Creamos el custom element que extiende de HTMLElement\r\n    shadow: ShadowRoot; // Establecemos shadow de tipo ShadowRoot\r\n    constructor(){\r\n        super()\r\n\r\n        this.shadow = this.attachShadow({mode: 'open'}); // Incializamos shadow con su mode open\r\n\r\n        this.render(); // Y hacemos el render\r\n    }\r\n\r\n    render(){\r\n        // Creamos los elementos que necesitamos\r\n        const image = document.createElement('img'); \r\n        const imageAttribute = this.getAttribute('image'); // Y obtenemos el atributo image y lo guardamos en imageAttribute\r\n        const style = document.createElement('style');\r\n\r\n        // Creamos un mapa que recibe una propiedad de tipo string y un valor de tipo string\r\n        const imageMap: {[key: string]: string} = {\r\n            // Establecemos las propiedades\r\n            'tijeras': scissorsUrl, \r\n            'piedra': rockUrl,\r\n            'papel': paperUrl\r\n        }\r\n\r\n        const imageUrl = imageMap[imageAttribute!]; // Y establecemos como imageUrl el valor de la imagen con propiedad imageAttribute (piedra, papel o tijeras)\r\n\r\n        if(imageUrl){ // Si imageUrl no es null\r\n            image.src = imageUrl; // Le establecemos como src la url\r\n            image.classList.add(imageAttribute!); // Y le agregamos el atributo como clase\r\n        }\r\n\r\n        image.alt = 'seleccion'; // Agregamos un alt a la imagen\r\n\r\n        style.innerHTML = `\r\n            img{\r\n                transition: all 0.3s ease-in-out;\r\n                width: 100%;\r\n                height: 100%;\r\n            }\r\n        `;\r\n\r\n        image.addEventListener('click', ()=>{ // Y hacemos un evento de click sobre la imagen\r\n            const selectionInfo = new CustomEvent('selection-info', { // El evento crea un custom event de nombre selection-info\r\n                detail: {\r\n                    selection: imageAttribute // Que devuelve el detail con selection y el atributo como valor\r\n                },\r\n                bubbles: true // Permitimos el burbujeo\r\n            })\r\n            this.dispatchEvent(selectionInfo); // Y enviamos el evento\r\n        })\r\n\r\n        this.shadow.appendChild(style);\r\n        this.shadow.appendChild(image);\r\n    }\r\n}\r\n\r\ncustomElements.define('selection-el', SelectionEl)","module.exports = __parcel__import__.meta.resolve(\"72eu7\");","module.exports = __parcel__import__.meta.resolve(\"7Nkwz\");","module.exports = __parcel__import__.meta.resolve(\"efEvF\");","class StarResult extends HTMLElement { // Creamos la clase que extiende de HTMLElement\r\n\tshadow: ShadowRoot; // Le damos un shadow\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.shadow = this.attachShadow({ mode: \"open\" }); // Inicializamos el shadow\r\n\r\n\t\tthis.render();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst div = document.createElement(\"div\"); // Creamos un div\r\n\r\n\t\tconst score = this.getAttribute('score'); // Obtenemos el atributo score\r\n\r\n\t\t// Y le agregamos un svg (Con un text que contiene el texto recibido)\r\n\t\tdiv.innerHTML = `\r\n            <svg width=\"260\" height=\"260\" viewBox=\"0 0 363 362\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M206.486 62.1223L208.047 62.9729L209.795 62.6458L320.673 41.9446L299.972 152.823L299.646 154.571L300.496 156.132L354.447 255.187L242.599 269.762L240.835 269.992L239.614 271.283L162.078 353.202L113.654 251.333L112.891 249.728L111.285 248.964L9.41443 200.538L91.3344 123.004L92.6263 121.782L92.8558 120.019L107.431 8.17017L206.486 62.1223Z\" fill=\"#6CB46C\" stroke=\"black\" stroke-width=\"13\"/>\r\n            <text x=\"50%\" y=\"50%\" dominant-baseline=\"middle\" text-anchor=\"middle\" fill=\"white\" font-size=\"70\">${score}</text>\r\n            </svg>\r\n        `;\r\n\r\n\t\tdiv.style.fontFamily = 'Odibee Sans, sans-serif'\r\n\r\n        const svgPath = div.querySelector('svg')!.querySelector('path'); // Seleccionamos el path del svg\r\n\r\n\t\t// Si el atributo es igual a 'perdiste'\r\n\t\tif(score?.toLocaleLowerCase() === 'perdiste'){\r\n\t\t\tsvgPath!.setAttribute('fill', 'var(--star-red)'); // Pone la estrella roja\r\n\t\t} \r\n\t\t\r\n\t\t// Si el atributo es igual a 'empate'\r\n\t\tif (score?.toLocaleLowerCase() === 'empate'){\r\n\t\t\tsvgPath!.setAttribute('fill', 'var(--star-yellow)'); // Pone la estrella amarilla\r\n\t\t}\r\n\r\n\t\t// Si no cumple con ninguna condicion, deja el color en #6CB46C\r\n\r\n\t\tthis.shadow.appendChild(div); // Le agregamos al shadow el div\r\n\t}\r\n}\r\n\r\ncustomElements.define(\"star-result\", StarResult); // Y definimos el custom element","import {navigate} from '../../router';\r\nimport { state } from '../../state'\r\n\r\nclass CounterEl extends HTMLElement {\r\n\t// Creamos un customElement para el contador\r\n\tshadow: ShadowRoot; // Le decimos que tendra shadow\r\n\tinterval: any; // Y un interval\r\n\r\n\tstatic get observedAttributes() {\r\n\t\treturn [\"count\"]; // Observamos el atributo 'count' con el metodo observedAttributes de los customElements\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.shadow = this.attachShadow({ mode: \"open\" }); // Inicializamos el shadow\r\n\t\tthis.render();\r\n\t}\r\n\r\n\trender() {\r\n\t\t// Creamos el metodo render\r\n\t\t// Limpiamos el contenido anterior\r\n\t\tthis.shadow.innerHTML = \"\";\r\n\r\n\t\t// Creamos el div, un span y el style\r\n\t\tconst div = document.createElement(\"div\");\r\n        const span = document.createElement('span');\r\n        const style = document.createElement(\"style\");\r\n        \r\n\r\n        // Le agregamos un svg al div (para hacer el contador)\r\n        div.innerHTML = `\r\n            <svg class=\"progress-ring\" viewBox=\"0 0 100 100\">\r\n                <circle\r\n                    class=\"ring-bg\"\r\n                    cx=\"50\" cy=\"50\" r=\"45\"\r\n                ></circle>\r\n                <circle\r\n                    class=\"ring-progress\"\r\n                    cx=\"50\" cy=\"50\" r=\"45\"\r\n                    stroke-dasharray=\"283\"\r\n                    stroke-dashoffset=\"0\"\r\n                ></circle>\r\n            </svg>\r\n        `;\r\n\r\n        div.appendChild(span); // Le agregamos el span al div\r\n\r\n\t\tlet seconds: number = parseInt(this.getAttribute(\"count\")!) || 0; // E inicializamos a seconds con el valor obtenido del atributo count o 0\r\n\r\n\t\tconst updateCounter = () => {\r\n            // Actualiza el n√∫mero visible\r\n            span.textContent = `${seconds}`;\r\n\r\n            if (seconds < 0) { // Cuando sea menor a 0\r\n                div.style.display = 'none'; // Lo dejamos de mostrar\r\n                clearInterval(this.interval); // Y terminamos el intervalo\r\n                navigate('/' + this.getAttribute('route'))\r\n            }\r\n            \r\n            seconds--; // Cambiamos el numero del contador\r\n        };\r\n\r\n\t\tstyle.innerHTML = `\r\n            div {\r\n                width: 200px;\r\n                height: 200px;\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n                position: relative;\r\n            }\r\n\r\n            span {\r\n                position: absolute;\r\n                font-size: 100px;\r\n                font-weight: 700;\r\n                z-index: 2;\r\n                color: black;\r\n            }\r\n            \r\n            .progress-ring {\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                transform: rotate(-90deg); \r\n            }\r\n            \r\n            .ring-bg {\r\n                fill: none;\r\n                stroke: #e0e0e0;\r\n                stroke-width: 10;\r\n            }\r\n\r\n            .ring-progress {\r\n                fill: none;\r\n                stroke: black;\r\n                stroke-width: 10;\r\n                stroke-dasharray: 283;\r\n                stroke-dashoffset: 0; \r\n                animation: sweep 1s linear infinite;\r\n            }\r\n\r\n            @keyframes sweep {\r\n                from {\r\n                    stroke-dashoffset: 0;\r\n                }\r\n\r\n                to {\r\n                    stroke-dashoffset: 283; \r\n                }\r\n            }\r\n        `;\r\n\r\n\t\tthis.shadow.appendChild(style);\r\n\t\tthis.shadow.appendChild(div);\r\n\r\n        updateCounter(); \r\n        // Iniciamos el intervalo para que se ejecute cada 1s\r\n        this.interval = setInterval(updateCounter, 1000);\r\n\t}\r\n\r\n    // Ejecutamos el metodo attributeChangedCallback\r\n\tattributeChangedCallback(name: string, oldValue: string, newValue: string) {\r\n\t\tif (name === \"count\") {\r\n\t\t\tclearInterval(this.interval); // Limpia el intervalo anterior\r\n\t\t\tthis.render(); // Vuelve a renderizar con el nuevo valor\r\n\t\t}\r\n\t}\r\n\r\n\tdisconnectedCallback() { // Y ejecuta el metodo disconnectedCallback para que no se ejecute en segundo plano el intervalo\r\n\t\tclearInterval(this.interval);\r\n\t}\r\n}\r\n\r\ncustomElements.define(\"counter-el\", CounterEl);"],"names":["$e817d3341cf3ea9c$var$containerEl","$0b89d474933103bc$export$ca000e230c0caa3e","data","history","play","user","machine","listeners","initLocalStorage","localData","localStorage","getItem","parsedData","JSON","parse","getState","setState","newState","callback","setLocalStorage","subscribe","push","filter","listener","setMoves","move","thisPlay","moveMap","Math","floor","random","score","whoWins","toLocaleLowerCase","moves","rules","tijeras","papel","piedra","info","setItem","stringify","$e817d3341cf3ea9c$var$routes","path","page","div","document","createElement","classList","add","innerHTML","style","button","querySelector","addEventListener","$e817d3341cf3ea9c$export$ff7962acd6052c28","appendChild","text","allSelections","querySelectorAll","counter","setAttribute","replaceWith","remove","e","selectedMove","detail","selection","forEach","element","image","shadowRoot","transform","opacity","getAttribute","lastState","userScore","length","machineScore","setTimeout","result","display","alert","backgroundColors","ganaste","perdiste","empate","pushState","test","find","r","$38489cf41c3f917c$var$ButtonEl","HTMLElement","shadow","attachShadow","mode","render","textContent","customElements","define","$dc07c5028d7b265d$exports","resolve","$2f4910a5b96eb79f$exports","$6434739029a36b0d$exports","$7673466413d194f8$var$SelectionEl","imageAttribute","imageUrl","imageMap","src","alt","selectionInfo","CustomEvent","bubbles","dispatchEvent","$d23422ec46677293$var$StarResult","fontFamily","svgPath","$46f73d452252c191$var$CounterEl","observedAttributes","span","seconds","parseInt","updateCounter","clearInterval","interval","setInterval","attributeChangedCallback","name","oldValue","newValue","disconnectedCallback","window","onpopstate","location","pathname"],"version":3,"file":"desafio-integrador-3.8746f2f6.js.map"}